---
layout: post
title: Computer Network
date: 2020-09-01 16:30:00 +0900
category: Lecture
---

# Computer Network :)

#### 인터넷
> * 컴퓨터로 연결하여 TCP/IP Protocol 이라는 통신 프로토콜을 이용해 정보를 주고받는 컴퓨터 네트워크

#### OSI와 TCP/IP 비교
> * TCP/IP 프로토콜은 OSI 모델보다 먼저 개발되었다. 그러므로 TCP/IP 프로토콜의 계층은 OSI 모델의 계층과 정확하게 일치하지 않는다.
* 두 계층을 비교할 때 , 세션(Session)과 표현(presentation) 2개의 계층이 TCP/IP프로토콜 그룹에 없다는 것을 알 수 있다.
* 두 모델 모두 계층형 이라는 공통점을 가지고 있으며 TCP/IP는 인터넷 개발 이후 계속 표준화되어 신뢰성이 우수인 반면, OSI 7 Layer는 표준이 되기는 하지만 실제적으로 구현되는 예가 거의 없어 신뢰성이 저하되어있다.
* OSI 7 Layer는 장비 개발과 통신 자체를 어떻게 표준으로 잡을지 사용되는 반면에 실 질적인 통신 자체는 TCP/IP 프로토콜을 사용한다.

출처: https://goitgo.tistory.com/25 [Informaion Security]


#### TCP/IP Suite의 layers

* ISO (International Standards Organization)에서 네트워크 통신을 위해 OSI(Open Systems Interconnection) model 개발

> OSI model
* Layer7 : Application
* Layer6 : Presentation
* Layer5 : Session
* Layer4 : Transport
* Layer3 : Network
* Layer2 : Data link
* Layer1 : Physics


> OSI Layers
* Layer-to-Layer Communication

> An Exchange using OSI model
* 하위 layer로 가면서 내용(header)추가
* 상위 layer로 가면서 내용(header)제거
  * header는 포장지라고 생각

> TCP/IP protocol Suite(Internet Protocol)
* Layer1 : Physics
  * 실제로 wire 사에서 이루어지는 bit 단위의 전송을 담당
  * physical layer의 communication unit: bit
  * 프레임 내부의 각 비트를 한 노드에서 다음 노드로 이동
  * 물리 계층에서의 프로토콜들은 링크에 의존하고, 링크의 실제 전송 매체에 의존
  * 네트워크에 쓰이는 물리적, 전기적 요소들을 관리
* Layer2 : Data link
  * 서로 이웃한 network 구성 요소 간의 data 전송을 담당
  * data link layer의 communication unit: frame
  * hop-to-hop delivery
  * 비트 단위의 정보를 frame 단위로 정리하고, hop-to-hop delivery를 담당
* Layer3 : Network
  * source에서 destination까지의 datagram 전송을 담당
  * network layer의 communication unit: Datagram
  * source to destination
  * 각 IP주소가 packit 헤더에 들어감
  * IP protocol
  * source에서 destination까지의 packit 전송을 담당
* Layer4 : Transport
  * process 간의 data 전송을 담당
  * transport layer의 communication unit: Segment, user datagram, packet
    * 해당 layer에서 사용되는 특정 프로토콜에 따라 달라짐
  * reliable
  * process-to-process delivery (process=application)
  * error recovery
  * error recovery를 포함하여 process 간의 reliable delivery를 제공
  * port 번호를 packet의 헤더에 적어줌
  * TCP protocol
* Layer5 : Application
  * 다양한 network application을 지원


_시간에 따라 데이터가 구체화되며 TCP/IP Protocol Suite에서 OSI Model로 바뀜_
_하지만 현재까지 살아남은 인터넷은 TCP/IP Protocol이다_

> Layers in the OSI model
* Layer1 : Physics
  * physical layer의 communication unit: bit
  * 프레임 내부의 각 비트를 한 노드에서 다음 노드로 이동
  * 물리 계층에서의 프로토콜들은 링크에 의존하고, 링크의 실제 전송 매체에 의존
  * 네트워크에 쓰이는 물리적, 전기적 요소들을 관리
* Layer2 : Data link
  * data link layer의 communication unit: frame
  * hop-to-hop delivery
  * 비트 단위의 정보를 frame 단위로 정리하고, hop-to-hop delivery를 담당
* Layer3 : Network
  * network layer의 communication unit: Datagram
  * source to destination
  * 각 IP주소가 packit 헤더에 들어감
  * IP protocol
  * source에서 destination까지의 packit 전송을 담당
* Layer4 : Transport
  * transport layer의 communication unit: Segment, user datagram, packet
    * 해당 layer에서 사용되는 특정 프로토콜에 따라 달라짐
  * reliable
  * process-to-process delivery (process=application)
  * error recovery
  * error recovery를 포함하여 process 간의 reliable delivery를 제공
  * port 번호를 packet의 헤더에 적어줌
  * TCP protocol
* Layer5 : Session
  * session을 생성, 관리, 종료
* Layer6 : Presentation
  * data를 전송, 암호화, 압축
* Layer7 : Application
  * application layer의 communication unit: Message
  * 나와 상대방의 포트 번호를 헤더에 저장(왕복해야 하므로 둘 다 필요)
  * host(사용자)가 다양한 network resources에 접근하고 사용할 수 있게 함


> #### ADDRESSING
* TCP/IP protocol suite에서의 주소
1. Application layer
  * 주소: Application-Specific address
  * 패킷: Message
2. Transport layer
  * 주소: Port address
  * 패킷: Segment
3. Network layer
  * 주소: Logical address
    * IP주소
    * 전세계에 딱 하나인 고유한 번호
    * 변경 가능
  * 패킷: Datagram
4. Data link layer
  * 주소: Physical address
    * MAC주소
    * 제조회사에서 만들어 부여하는 것이 디폴트
  * 패킷: Frame
  * Source to Destination
5. -
  * 주소: -
  * 패킷: Bits

> 데이터 전송 방식
* packet switching network : <br>
  * 목적지 주소 전달 방식(현재 사용하는 인터넷 방식)
  * 경로 알지 X, 목적지만 앎
* circuit switching network : <br>
  * 중앙 제어 전달 방식
  * 출발 전 경로를 미리 알아야 함, 중앙이 파괴되면 네트워크 사용 불가능하여 전쟁 때 취약

> Transmission Control Protocol(TCP) / Chapter15
* TCP/IP protocol suite
  * 프로토콜: 컴퓨터와 컴퓨터가 네트워크를 이용하여 통신하기 위해 정해놓은 '약속'
  * application: SMTP, FTP, TFTP, DNX, SNMP, ...DHCP
  * transport layer에 있는 protocol 종류: UDP, TCP, SCTP
  * Network layer: IGMP, ICMP, IP, ARP
  * Data link layer, Physical layer: Underlying LAN or WAN technology
* application layer 제외하고 모두 커널에 이미 구현되어 있음

> Stream delivery
* boundary delivery 의 반대 개념
* Stream delivery: TCP에서 사용되는 경계가 없는 전달 방식
  * application에서는 본인의 boundary를 만들지마 배송 boudary는 설정하지 않음
  * byte 단위로 stream(전달)
  * receiving process에서 필요에 따라 packaging 하여 전송

> Sending and receiving buffers
* TCP에서의 버퍼 영역
  * 보내는 쪽과 받는 쪽 모두 있음
  * transport layer
  * application에서 TCP에 데이터를 보내주면 buffer의 빈 공간부터 byte 단위로 채워짐
  * segment로 만들어서 전송됨
* TCP vs UDP
  * TCP: 신뢰성 보장O (비서가 없어진 패킷 체크)
  * UDP: 신뢰성 보장X

> TCP의 신뢰성 보장
* 패킷마다 번호를 붙여 수신 번호와 비교하여 패킷의 손실을 확인함
* 전송되는 데이터는 TCP에 의해 번호가 부여됨
* 패킷마다 부여되는 번호: Sequence 번호, 랜덤으로 부여, 패킷 사이즈만큼 증가
* TCP의 Sequence번호는 segment 안에 있는 첫번째 데이터 byte 번호로 할당됨
  * 이는 랜덤으로 할당된 것
* ack번호: 응답 번호
  * cumulative ACK (누적 방식)

> 데이터를 보내고 응답을 받는 방식
1. Selective ACK
* 직관적으로 이해하기 쉬운 방식
* ack번호가 "받은" segment의 시작 번호
2. Cumulative ACK
* ack번호가 "받을" segment의 시작 번호
* 시작 번호는 header에 적혀있고, size는 시스템에서 알려주기때문에 다음 번에 받아야 할 ACK 번호를 알 수 있음 (이와 실제 ACK 번호를 비교)

> TCP segment format
* Segment = Header(20~60byte) + Data
* Segment의 header
  * Source port address(보낸 쪽 포트 번호)
  * Destination port address(받는 쪽(상대방)포트 번호)



read가 리턴 = 한 바이트 이상이 들어왔다 리턴이 1 이상
어느 때 리턴값이 0이 되느냐.. fin이란 패킷을 받게 되면 read가 리턴을 하는데 그 때 리턴값이 0이다. 이걸 보고 서버가 상대방이 fin을 보냈는지 아닌지 확인

fin이 언제 전송이 되느냐?
1. 인위적으로 close 함수를 호출할 때
2. 프로그램이 종료될 때
3. contrl c로 강제 종료시킬 때

서버는 프로그램이 종료 요청을 했는지 확인할 수 있다.

저번시간: time wait 까지 설명함. (복습 1시간 동안 하심;;)


클라이언트가 Fin을 보내고
서버가 fin ack을 보내고
클라이언트가 ack을 보내면, 클라이언트는 일 다 한 것.
그런데 왜 time out 상태로?
연결 종료 상태에 있는 마지막 ack이 없어지면 조금 복잡해진다..

신뢰성 보장을 위해 내가 데이터를 보내면 응답을 받아야해서 어느 정도 기다려준다.
일정 시간 지나도 응답이 안오면 신뢰성 보장을 하기 위해 다시 재전송을 한다.

time out 상태 이유: 서버 입장에서는 내가 보낸 fin이 없어졌는지 상대방이 보낸 ack이 없어졌는지 알 수가 없다. 나는 분명히 fin을 보냈고 ack을 못받은 거니까..
그래서 이걸 확실하게 하기 위해 fin을 다시 보낸다. 그런데 클라이언트가 ack을 보내고 할 일 다했다고 해서 전화 끊으면 fin에 대해 응답할 수 있는 상대방이 없어짐. 이를 방지하기 위해 클라이언트는 ack을 보내고나서도 대기하는 것임(1~2분 정도) 대기 후 종료.

프로그램이 아직 살아 있다 = 버퍼들이 아직 존재 = IP 주소와 포트 번호가 할당이 되어 있는 소켓이 살아있음

서버에서 ^c : FIN이 전송(서버 강제 종료)
클라이언트가 ack을 보내고 서버가 타임 웨잇 상태로 들어감(그러나 서버가 아직 죽지는 않았음)

만약에 다시 server 9190 하면 bind 에러가 나옴.
bind: 소켓에 IP주소와 port 번호를 할당하는 것. 그런데 포트번호 9190은 아직 사용중이다.. 강제종료 시켜도 살아있음.. 그래서 내가 다시 9190을 소켓에 할당하려고 하면 바인드 에러를 보내줌

리슨이라는 함수를 호출하면 일반 소켓->서버 소켓이 된다.



<4주차>
listen vs. accept
listen: 서버 소켓으로 만들어 주었을 경우.
listen 상태에서 syn이 오면 syn ack을 보내줌.

> SYN Flooding
소켓이란 함수를 호출하면 fd 값이 리턴이 된다.
그 소켓에다가 bind를 통해 ip주소와 port 번호 할당.
서버는 리슨 함수를 호출하여 일반 소켓을 서버 소켓으로 바꾸어 줌. 서버 소켓이 되었다는 뜻은 syn이 오면 syn ack을 보내줄 수 있다는 것! (일반 소켓은 syn 받아도 syn ack 못 보냄)

서버는 연결 요청 대기 큐에 넣어놓고
ack이 안왔는데 다른 클라이언트가 syn을 보내면 이를 연결 요청 대기 큐에 집어 넣는다.
ack이 도착이 하면 return을 하면서 (리턴 값이 새로운 소켓 디스크립터 값) 
accept에서 block되어 있음. ack이 올 때까지.
ack이 오면 소켓이 새로 생성되고 그 소켓을 통해 사용자에게 write, read

마지막 ack이 오면 리턴하고 새로운 소켓이 만들어지고 서버는 해당 클라이언트와 이 소켓을 통해 (New 소켓, 파일 디스크립터임) 소통함.

syn을 계속해서 보내주면 연결 요청 대기 큐를 꽉 채운다. (서로 다른 ip, port 번호로) 

한 방향으로 계속 flooding이 오면 detect 가능.
20대의 컴퓨터가 동시에 syn을 보내면 공격하는 syn 패킷인지 서비스 접속을 요청하는 syn 패킷인지 구별이 힘들다. 한 명이 공격하는 건 감지가 쉬운데 동시에 여러 개의 공격은 감지가 힘들다. 이를 DDos 라고 한다.(D:distributed)
그래서 서버가 서비스를 거절하는 상황을 DDos라고 한다.
(지금은 큐에 집어넣지 않아 간단한 DDos는 서버에서 해결)

tcp가 이렇게 디자인이 되어있기 때문에 반드시 누군가는 서버, 누군가는 클라이언트가 되어야 한다. 연결이 되어야만 데이터가 왔다갔다.
syn을 받고 syn ack 을 보내주고 클라이언트랑 새로운 소켓으로 소통.



> 15.15
* time wait이 필요한 이유: <br>
  * 서버는 connection들을 클라이언트의 IP주소와 포트 번호의 조합으로 구분을 하는데, 기존 커넥션에서 보냈던 패킷이 나중에 도착하게 되면 새로운 커넥션과 기존 커넥션의 데이터를 구분할 방법이 없음
  * 해결책: 포트 넘버를 다르게 하면 되므로, time wait을 두어 connection이 끝나도 포트 번호를 1~2분 정도 반납을 하지 않도록 함


1. 
2. 에코 서버(iterative server)
연결 요청 된 후 데이터를 보내면, 데이터가 그대로 에코가 되어서 오는 것이 에코 서버이다.
이 때 여러 개의 다른 클라이언트에서 연결 요청 보내면, 연결 요청 대기 큐에 저장됨. 연결되어 있는 클라이언트에서 연결 종료 요청을 보내면 연결 종료됨. 이러한 서버를 iterative 서버라고 부름. 연결이 종료되면 다음 클라이언트 서비스, 해당 클라이언트 연결 종료되면 다음 클라이언트 서비스...


> #### 15.6 WINDOWS IN TCP(5주차 1)
* STOP&WAIT
  * 신뢰성 보장 위해 패킷마다 SYN 번호를 붙였고, ACK을 통해 받은 데이터에 대해 응답을 보내는 것을 반복적으로 하는 수행 방법
  * 비효율적(왕복 시간이 클 경우)
    * 해결방법: 데이터를 무작정 많이 보내면 됨, 단 상대방이 저장할 수 있는 만큼의 데이터량을 송신해야 함
    * RECEIVER가 얼마 만큼의 공간이 남았는지 SENDER에게 알려주어야 함
    * 이 때 빈 공간 = RECEIVER의 WINDOW 라고 함
    * window: sender가 한 순간에 보낼 수 있는 최대의 데이터량
    * 15.5 TCP segment format에 window size가 16bits로 헤더 내에 내장되어 있음
    * ack이 전송이 될 때 항상 window의 사이즈까지 같이 전송이 됨(rwnd)
    