---
layout: post
title: Computer Network
date: 2020-09-01 16:30:00 +0900
category: Lecture
---

# Computer Network :)

#### 인터넷
> * 컴퓨터로 연결하여 TCP/IP Protocol 이라는 통신 프로토콜을 이용해 정보를 주고받는 컴퓨터 네트워크

#### OSI와 TCP/IP 비교
> * TCP/IP 프로토콜은 OSI 모델보다 먼저 개발되었다. 그러므로 TCP/IP 프로토콜의 계층은 OSI 모델의 계층과 정확하게 일치하지 않는다.
* 두 계층을 비교할 때 , 세션(Session)과 표현(presentation) 2개의 계층이 TCP/IP프로토콜 그룹에 없다는 것을 알 수 있다.
* 두 모델 모두 계층형 이라는 공통점을 가지고 있으며 TCP/IP는 인터넷 개발 이후 계속 표준화되어 신뢰성이 우수인 반면, OSI 7 Layer는 표준이 되기는 하지만 실제적으로 구현되는 예가 거의 없어 신뢰성이 저하되어있다.
* OSI 7 Layer는 장비 개발과 통신 자체를 어떻게 표준으로 잡을지 사용되는 반면에 실 질적인 통신 자체는 TCP/IP 프로토콜을 사용한다.

출처: https://goitgo.tistory.com/25 [Informaion Security]


#### TCP/IP Suite의 layers

* ISO (International Standards Organization)에서 네트워크 통신을 위해 OSI(Open Systems Interconnection) model 개발

> OSI model
* Layer7 : Application
* Layer6 : Presentation
* Layer5 : Session
* Layer4 : Transport
* Layer3 : Network
* Layer2 : Data link
* Layer1 : Physics


> OSI Layers
* Layer-to-Layer Communication

> An Exchange using OSI model
* 하위 layer로 가면서 내용(header)추가
* 상위 layer로 가면서 내용(header)제거
  * header는 포장지라고 생각

> TCP/IP protocol Suite(Internet Protocol)
* Layer1 : Physics
  * 실제로 wire 사에서 이루어지는 bit 단위의 전송을 담당
  * physical layer의 communication unit: bit
  * 프레임 내부의 각 비트를 한 노드에서 다음 노드로 이동
  * 물리 계층에서의 프로토콜들은 링크에 의존하고, 링크의 실제 전송 매체에 의존
  * 네트워크에 쓰이는 물리적, 전기적 요소들을 관리
* Layer2 : Data link
  * 서로 이웃한 network 구성 요소 간의 data 전송을 담당
  * data link layer의 communication unit: frame
  * hop-to-hop delivery
  * 비트 단위의 정보를 frame 단위로 정리하고, hop-to-hop delivery를 담당
* Layer3 : Network
  * source에서 destination까지의 datagram 전송을 담당
  * network layer의 communication unit: Datagram
  * source to destination
  * 각 IP주소가 packit 헤더에 들어감
  * IP protocol
  * source에서 destination까지의 packit 전송을 담당
* Layer4 : Transport
  * process 간의 data 전송을 담당
  * transport layer의 communication unit: Segment, user datagram, packet
    * 해당 layer에서 사용되는 특정 프로토콜에 따라 달라짐
  * reliable
  * process-to-process delivery (process=application)
  * error recovery
  * error recovery를 포함하여 process 간의 reliable delivery를 제공
  * port 번호를 packet의 헤더에 적어줌
  * TCP protocol
* Layer5 : Application
  * 다양한 network application을 지원


_시간에 따라 데이터가 구체화되며 TCP/IP Protocol Suite에서 OSI Model로 바뀜_
_하지만 현재까지 살아남은 인터넷은 TCP/IP Protocol이다_

> Layers in the OSI model
* Layer1 : Physics
  * physical layer의 communication unit: bit
  * 프레임 내부의 각 비트를 한 노드에서 다음 노드로 이동
  * 물리 계층에서의 프로토콜들은 링크에 의존하고, 링크의 실제 전송 매체에 의존
  * 네트워크에 쓰이는 물리적, 전기적 요소들을 관리
* Layer2 : Data link
  * data link layer의 communication unit: frame
  * hop-to-hop delivery
  * 비트 단위의 정보를 frame 단위로 정리하고, hop-to-hop delivery를 담당
* Layer3 : Network
  * network layer의 communication unit: Datagram
  * source to destination
  * 각 IP주소가 packit 헤더에 들어감
  * IP protocol
  * source에서 destination까지의 packit 전송을 담당
* Layer4 : Transport
  * transport layer의 communication unit: Segment, user datagram, packet
    * 해당 layer에서 사용되는 특정 프로토콜에 따라 달라짐
  * reliable
  * process-to-process delivery (process=application)
  * error recovery
  * error recovery를 포함하여 process 간의 reliable delivery를 제공
  * port 번호를 packet의 헤더에 적어줌
  * TCP protocol
* Layer5 : Session
  * session을 생성, 관리, 종료
* Layer6 : Presentation
  * data를 전송, 암호화, 압축
* Layer7 : Application
  * application layer의 communication unit: Message
  * 나와 상대방의 포트 번호를 헤더에 저장(왕복해야 하므로 둘 다 필요)
  * host(사용자)가 다양한 network resources에 접근하고 사용할 수 있게 함


> #### ADDRESSING
* TCP/IP protocol suite에서의 주소
1. Application layer
  * 주소: Application-Specific address
  * 패킷: Message
2. Transport layer
  * 주소: Port address
  * 패킷: Segment
3. Network layer
  * 주소: Logical address
    * IP주소
    * 전세계에 딱 하나인 고유한 번호
    * 변경 가능
  * 패킷: Datagram
4. Data link layer
  * 주소: Physical address
    * MAC주소
    * 제조회사에서 만들어 부여하는 것이 디폴트
  * 패킷: Frame
  * Source to Destination
5. -
  * 주소: -
  * 패킷: Bits

> 데이터 전송 방식
* packet switching network : <br>
  * 목적지 주소 전달 방식(현재 사용하는 인터넷 방식)
  * 경로 알지 X, 목적지만 앎
* circuit switching network : <br>
  * 중앙 제어 전달 방식
  * 출발 전 경로를 미리 알아야 함, 중앙이 파괴되면 네트워크 사용 불가능하여 전쟁 때 취약

> Transmission Control Protocol(TCP) / Chapter15
* TCP/IP protocol suite
  * 프로토콜: 컴퓨터와 컴퓨터가 네트워크를 이용하여 통신하기 위해 정해놓은 '약속'
  * application: SMTP, FTP, TFTP, DNX, SNMP, ...DHCP
  * transport layer에 있는 protocol 종류: UDP, TCP, SCTP
  * Network layer: IGMP, ICMP, IP, ARP
  * Data link layer, Physical layer: Underlying LAN or WAN technology
* application layer 제외하고 모두 커널에 이미 구현되어 있음

> Stream delivery
* boundary delivery 의 반대 개념
* Stream delivery: TCP에서 사용되는 경계가 없는 전달 방식
  * application에서는 본인의 boundary를 만들지마 배송 boudary는 설정하지 않음
  * byte 단위로 stream(전달)
  * receiving process에서 필요에 따라 packaging 하여 전송

> Sending and receiving buffers
* TCP에서의 버퍼 영역
  * 보내는 쪽과 받는 쪽 모두 있음
  * transport layer
  * application에서 TCP에 데이터를 보내주면 buffer의 빈 공간부터 byte 단위로 채워짐
  * segment로 만들어서 전송됨
* TCP vs UDP
  * TCP: 신뢰성 보장O (비서가 없어진 패킷 체크)
  * UDP: 신뢰성 보장X

> TCP의 신뢰성 보장
* 패킷마다 번호를 붙여 수신 번호와 비교하여 패킷의 손실을 확인함
* 전송되는 데이터는 TCP에 의해 번호가 부여됨
* 패킷마다 부여되는 번호: Sequence 번호, 랜덤으로 부여, 패킷 사이즈만큼 증가
* TCP의 Sequence번호는 segment 안에 있는 첫번째 데이터 byte 번호로 할당됨
  * 이는 랜덤으로 할당된 것
* ack번호: 응답 번호
  * cumulative ACK (누적 방식)

> 데이터를 보내고 응답을 받는 방식
1. Selective ACK
* 직관적으로 이해하기 쉬운 방식
* ack번호가 "받은" segment의 시작 번호
2. Cumulative ACK
* ack번호가 "받을" segment의 시작 번호
* 시작 번호는 header에 적혀있고, size는 시스템에서 알려주기때문에 다음 번에 받아야 할 ACK 번호를 알 수 있음 (이와 실제 ACK 번호를 비교)

> TCP segment format
* Segment = Header(20~60byte) + Data
* Segment의 header
  * Source port address(보낸 쪽 포트 번호)
  * Destination port address(받는 쪽(상대방)포트 번호)