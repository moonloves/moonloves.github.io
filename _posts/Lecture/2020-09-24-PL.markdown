---
layout: post
title: Computer Network Lab
date: 2020-09-01 16:30:00 +0900
category: Lecture
---

# 프로그래밍 언어론 :)

> 컴파일러 구현 단계
1. 원시 코드
2. 어휘 분석
3. 구문 분석
4. 의미 분석 <여기까지 전반부>

5. 중간 코드 최적화
6. 코드 생성
7. 목적 코드 최적화<여기까지 후반부>

8. 목적 프로그램

구문분석기는 어휘 분석기의 결과인 토큰 열로부터 트리를 구성하는 일을 함.
이를 syntax tree라고 함

FSM
AST(Abstract Syntax Tree)

RDP(Recursive Descent Parser) : 순환 재귀 하강
1. 각 비단말 기호의 구문 규칙에 대해 하나의 프로시저를 만들되, 우변을 모사하도록 프로시저를 만듦
2. 우변을 모사할 때 단말 기호라면 (터미널이라면) 일치하는지 재검사하고, 비단말 기호라면 (논터미널이라면) 해당 프로시저를 호출

이 결과가 구문 분석과 같다.

이 재귀함수의 집합을 이용하면 구문 트리를 쉽게 만들 수 있다.

<K> ::= <S> '\n' <K> | EOF
<S> ::\ '(' <S> ')'<S>} 


<pre>
<code>
#include <iostream>
#include <cstdio>
#include <cstdlib>
using namespace std;
int lookahead = 0;
void K(), S();
int nexttoken();
void match(int);
void error(char c);

int main() {
        lookahead = nexttoken();
        K();
        return 0;
}

int nexttoken() {
        return getchar();
}
void match(int token) {
        if (lookahead == token)
                lookahead = nexttoken();
        else
                error(token);
}
void error(char c) {
        cout << "Sysntax Error : " << c << "\n";
        exit(-1);
}
void K() {
        if (lookahead==EOF)
                ;
        else {
                S(); match('\n'); K();
        }
}
void S() {
        if (lookahead=='(') {
                        match('('); S(); match(')'); S();
        }
        else
                ;)
}
</code>
</pre>