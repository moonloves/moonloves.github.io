---
layout: post
title: Programming Language
date: 2020-09-01 16:30:00 +0900
category: Lecture
---

# 프로그래밍 언어론 :)


### PL week2

> 1) 프로그래밍 패러다임
* 프로그램을 작성하는 전형적인 방식
* 프로그래밍 언어에 종속적인 것이 아니라
* 프로그래머가 추구하는 프로그램의 작성 방식에 따라 다르게 나타남
* 해당 언어가 추구하는 작성 방식이 있음(이론과 현실은 조금 다름), 이것이 확장되는 형태로 프로그래밍 언어가 발전하고 있음

> 2) 프로그래밍 언어 패러다임
* inperative(procedure) programming
  * 절차적 프로그래밍
    * 대표 언어: C, COBOL, Fortran
      * COBOL: IDENTICIFATION, ENVIRONMENT DIVISION, DATA DIVISION, PROCEDURE DIVISION으로 이루어짐
* logical(declarative) programming
  * 선언적 프로그래밍
  * 문제의 요구사항을 선언적으로 명시하는 것에 초점을 맞춤
  * 대표 언어: prolog(Facts, Rules, Queries) (사실과 규칙, 이를 바탕으로 DB만들고 query로 수행)
    * 계산 언어학, 자연어 처리에서 많이 사용
    * Facts: 소크라테스는 사람이다     --- DB안에 들어감
    * Rules: 모든 사람은 죽는다        --- DB안에 들어감
    * Querise: 소크라테스는 죽습니까?  --- 결과는 true/false
    * https://www.swi-prolog.org/download/stable
* functinoal Programming
  * 함수형 프로그래밍
  * 해당 패러다임에 따라 주어진 데이터를 원하는 형태로 변경하다보니 메모리관리가 어려워져 이에 대한 대안으로 나옴
  * 데이터를 값으로 간주하여 새로운 값을 생성하는 함수에 초점을 맞춰 메모리 관리에 대한 부담을 덜어줌
  * 방법: 데이터를 바꾸는 명령어를 함수로 취급(대입문이 사라짐)
  * 하지만 대입문은.. 값을 바꾸는 것이 아니라 값의 이름을 붙이는 의미로 사용된다!
  * 대표언어: LISP, Haskell 등
* object-oriented programming
  * 객체지향 프로그래밍
  * 대표언어: JAVA, C++, C#
  * python처럼 절차적 프로그래밍에서 시작하여 functional programming으로 발전한 경우도 있음
* 패러다임은 공존할 수 있음, 기존 패러다임을 공고히 하여 다른 패러다임을 수용하는 자세 필요
> 3) 다양한 패러다임의 예
* imperative(초기)
<pre><code>
		int result = 1;
		for(int i=j; i>0; i--)
			result = result * i; // 대입문이 있음
		System.out.println("Factorial Number : " + result);
</code></pre>
* functional programming(Old 방식)
  * 원본 값을 바꾸지 않고 프로그래밍 가능(단순한 숫자의 비교 통해), 자기 자신을 호출함으로써 문제를 해결
<pre><code>
public class Paradigm {
	// functional programming 방식(이것도 옛날 방식)
	public static int factorial(int n) {
		if(n==1)
			return n;
		else 
			return n * factorial(n-1);
	}
System.out.println("Factorial Number : " + factorial(j));
</code></pre>
  * modern 방식
  * Stream, lambda 이용
<pre><code>
System.out.println("Factorial Number : " + IntStream.rangeClosed(2, j).reduce(1, (a, b) -> {return a * b;})); // 정수값(identity), 인수 두 개, 함수값
</code></pre>

## PL 2주차 세번째 수업
> (1) 구문론, 의미론
* 구문론: 문법적인 것, 문장이 구성되는 방식에 대해서
* 의미론: 문장이 나타내는 의미에 대해서
* 프로그래밍 언어에서는 명확한 문법이 더 중요


> (2) CFG, BNF, EBNF, syntax diagram
* CFG: 문맥 자유 문법(=Context free grammer), 문맥에 영향을 받지 않는 문법
* 비단말기호, 단말기호, 시작용 비단말기호, 규칙들로 이루어짐
  * 비단말기호: 정의가 될 대상
  * 단말기호: 언어에서 직접 사용하는 표현(상수같은)
  * 시작용 비단말기호: 언어에서 독립적으로 사용될 수 있는 단위
  * 규칙: 비단말기호, 단말기호, 시작용 비단말기호를 조합으로써 구체적으로 정의하는 것
* BNF
  * meta symbol &#60; &#60;(비단말 기호 표시), ::=(정의), |(택일)
  * &#60;if&#62; ::= if &#60;stat&#62; then &#60;stat&#62;<br>
                  | if &#60;stat&#62; then &#60;stat&#62; else &#60;stat&#62;
  * &#60;identifier&#62; ::= &#60;letter&#62; | &#60;identifier&#62;&#60;letter&#62; | &#60;identifier&#62;&#60;digit&#62;
    * 셋 중 하나, letter와 digit에 대한 정의 필요
  * &#60;letter&#62; ::= "A" | "B" | "C" | ... | "Y" | "Z" | "a" | "b" | ... | "y" | "z'
  * &#60;digit&#62; ::= "0" | "1" | ... | "8" | "9"
  * &#60;nat&#62; ::= &#60;digit&#62;&#60;nat&#62; | &#60;digit&#62;
    * 왼쪽 중에서 택일 하여 오른쪽 걸로 바꿈..
  * 문장 생성 과정(예. 589가 유도되는 과정)
    * &#60;nat&#62; => &#60;digit&#62;&#60;nat&#62; ... 공책 참고..
    * start symbol이라고 하는 비단말 기호부터 시작
* 구문 도표
  * 사각형(non terminal), 원(terminal), 화살표(기호 연결)


> 의미론(형식 의미론, formal Semanticx)
* Semantic: 구문이 있어야지만 의미가 있음, 구문론의 설명을 채워넣는 역할
* 정적 의미론(Static Semantics)
  * Attribute Grammer(속성 문법)
    * Syntax rule:
      * <exp> ::= <var>1 + <var>2
      * ex) int a = b + c
    * Semantic rule:
      * <exp>.actual_type = <var>1.actual_type
      * ex) b, c의 타입에 a의 타입이 대입된다.
    * predicate:
      * <var>1.actual_type == <var>2.actual_type
      * <exp>.expected_type == <exp>.actual_type
* 동적 의미론(Dynamic Semantics)
  * Operational Semantics(기능적 의미론)
    * <실행할 명령어, 현재 메모리 상태>
      < c=a; a=b; b=c; , [a->1, b->2, c->0]>
      => < a=b; b=c;, [a->1, b->2, c=>1]>
      => < b=c; , [a->2, b->2, c->1]>
      => < , [a->2, b->1, c->1]>
  * Denotational Semantics(표시적 의미론)
    * 수학적 ex) 이진수 표현
    * <B> ::= 0 | 1 | <B> 0 | <B> 1
    * ex) 1, 110, 1001 ... 
    * Natural = {0, 1, 2, ...}
    * 각 자연수가 이진수 하나하나에 대응이 된다.
    * 이를 formalize 하기 위해 의미 함수를 하나 만들어보면,
    * Valuation: B->N
    valuation[[ 0 ]] = 0
    valuation[[ 1 ]] = 1
    valuation[[ B 0 ]] = 2 * valuation[[ B ]]
    valuation[[ B 1 ]] = 2 * valuation[[ B ]]+1
    * ex) 110
    valuation[[ 110 ]] = 2*valuation[[ 11 ]]
    = 2*(2*valuation[[ 1 ]] + 1)
    = 2*(2*1+1) = 6
  * Axiomatic Semantics(공리적 의미론)
    * 프로그램의 실행 의미를 프로그램의 효과로 해석(사전조건 P를 사후조건 Q로 변화)
    * {P} S {Q} (s:statement)
    * {P}  x=y*2; { x<10 }
      P를 구해보면, ( x<10 )[ x-> y*2 ]
      <=> y*2 < 10 <=> y < 5
      { y < 5 } x=y*2; { x < 10}
    * 사전조건을 가지고 주어진 프로그램 s가 있으면 사후조건을 구할 수 있다.
    * s 후에 사후조건을 만족하려면 필요한 사전조건을 구할 수 있다.



> (1) 어휘분석, 토큰
* 토큰: 문법적으로 의미있는 최소의 단위
  * 식별자의 시작은 영문자/언더스코어/달러기호($)로 시작(숫자는 안됨)
  * 첫 글자 뒤에 나올 수 있는 것은 영문자/_/$/digit 0 개 또는 그 이상 나올 수 있음(BNF, EBNF, 유도 가능)
  * CFG
    * G = {Vn, Vt, P, S}
    * Vn: non terminal의 유한 집합
    * Vt: terminal 의 유한 집합
    * P: 생성 규칙의 유한 집합
    * S: 시작 기호(Vn의 원소)
  * BNF
    * <id> ::= <initial> | <initial><more>
    * <letter> ::= a | ...  | z | A | ... | Z
    * <digit> ::= 0 | ...  | 9
    * <initial> ::= <letter> | _ | $
    * <more> ::= <final> | <more><final>
    * <final> ::= <initial> | <digit>
  * 유도(파스트리 가기 전에 필요) ex) r2d2
    * <letter> 2 d 2
    * <initial> 2 d 2
    * <initial> <digit> d 2
    * <initial> <final> d 2
    * <initial> <final> <letter> 2
    * <initial> <final> <initial> 2
    * <initial> <final> <final> 2
    * <initial> <final> <final> <digit>
    * <initial> <final> <final> <final>
    * <initial> <more> <final> <final>
    * <intial> <more> <final>
    * <intial> <more>
    * <id>
    * 즉, r2d2는 JAVA에서 쓸 수 있는 구문 규칙이다가 증명(유도)됨
* 어휘분석: 문법적으로 의미있는 최소의 단위로 분할

> (2) 구문 분석
어휘분석이 끝난 뒤 시행
유도 구문 규칙을 사용하여 만들어진다면 유효한 프로그래밍

> 유도, 파스트리
* <e> ::= <e>+<e> | <e>-<e> | <e>*<e> | <e>/<e> | (<e>) | <d> // e = expression
* <d> ::= 0 | ... | 9* 
* 1-4*3
* <e>
* -> <e>-<e> // 1-4
* -> <e>-<e>*<e> // 1-4*3
* -> <e>-<e>*<d>
* -> <e>-<e>*3
* -> <e>-<d>*3
* -> <e>-4*3
* -> <d>-4*3
* -> 1-4*3
* 파스트리를 만들기 위해 valid

* 연산자 우선순위 보장(f가 dicimal이 먼저 수행이 됨)
* <e> ::= <e>+<e> | <e>-<e> | <t>
* <t> ::= <t>*<t> | <t>/<t> | <f> // *와 /에 연산자 우선순위를 먼저 줌
* <f> ::= (<e>) | <d>
*  
*  10-6+4 (우선순위가 동일한 연산자에서도 우선순위가 필요하다! -> 왼쪽부터 계산되어야함)
* - 좌결합 연산자
* <e> ::= <e>+<t> | <e>-<t> | <t> (t=term)
* <t> ::= <t>*<f> | <t>/<f> | <f> (f=factor)
* <f> ::= (<e>) | <d>
* 
* 중첩된 if문의 else (else문의 개수가 if문의 개수보다 작은 경우 else문을 어느 조건의 것일 때 수행해야하는지 모호해짐)
* <if stmt> ::= if <logic exp> then <stmt> else <stmt> 
* 				| if <logic exp> then <stmt>
* <stmt> ::= <if stmt> | <assign stmt> | ....
* 
* if a>3 then if a<9 then b=1 else b=5
* 
* if (a>3) {
* 	if (a<9) {
* 		b=1
*   } else??? -> 파스트리가 두 가지 나올 수 있음
*   
* 모호성 제거하도록 변경
* 
* <if stmt> ::= if <logic exp> then <stmt2> else <stmt> 
* 				| if <logic exp> then <stmt> 
* <if stmt2> ::= if <logic exp> then <stmt2> else <stmt2>
* <stmt> ::= <if stmt> | <assign stmt> | ....
* <stmt2> ::= <if stmt2> | <assign stmt> | ....



> (3) 모호성
구문론에 부합하더라도 의미론의 관점에서 서로 다른 parse tree가 나오게 된다면 서로 다른 의미...



> 구문 분석기 구현(4주차)
> 컴파일러 구현 단계
1. 원시 코드
2. 어휘 분석
3. 구문 분석
4. 의미 분석 <여기까지 전반부>
5. 중간 코드 최적화
6. 코드 생성
7. 목적 코드 최적화<여기까지 후반부>
8. 목적 프로그램
구문분석기는 어휘 분석기의 결과인 토큰 열로부터 트리를 구성하는 일을 함.
구문분석기를 통해 구성된 트리를 syntax tree라고 함
FSM(Final Statement Machine) - 오토마타에서..
AST(Abstract Syntax Tree) : 
파스트리 - 문법에 대한 모든 정보를 담고 있는 트리
AST - 번역에 필요한 정보만 담고 있는 간단한 트리
RDP(Recursive Descent Parser) : 순환 재귀 하강(문법 규칙을 그대로 바꾼 코드 형태)
RDP가 따르는 규칙:
1. 각 비단말 기호의 구문 규칙에 대해 하나의 프로시저를 만들되, 우변을 모사하도록 프로시저를 만듦
2. 우변을 모사할 때 단말 기호라면 (터미널이라면) 일치하는지 재검사하고, 비단말 기호라면 (논터미널이라면) 해당 프로시저를 호출
이 결과가 구문 분석과 같다.
따라서 이 재귀함수의 집합을 이용하면 구문 트리를 쉽게 만들 수 있다.
괄호의 짝이 맞는지에 대한 구문규칙 작성

<!--
<K> ::= <S> '\n' <K> | EOF
<S> ::= { '(' <S> ')'<S>} 
-->

<pre>
<code>
#include <iostream>
#include <cstdio>
#include <cstdlib>
using namespace std;
int lookahead = 0;
void K(), S();
int nexttoken();
void match(int); // 괄호가 맞았을 때 처리하는 함수
void error(char c); // 에러 처리하는 함수
int main() {
        lookahead = nexttoken(); // 토큰을 받을 함수
        K(); // non terminal을 함수로 만듦
        return 0;
}
int nexttoken() {
        return getchar(); // 한 글자 받음
}
void match(int token) {
        if (lookahead == token) // 토큰이면
                lookahead = nexttoken(); // 다음 토큰을 미리본다(이로써 구문분석기가 다음 행동 결정하도록 함)
        else
                error(token);
}
void error(char c) { // 에러 메세지 구현
        cout << "Sysntax Error : " << c << "\n";
        exit(-1); // 에러 메세지 출력하고 종료
}
void K() {
        if (lookahead==EOF) // ctrl+d
                ;
        else {
                S(); match('\n'); K(); // 재귀 <S> '\n' <k>
        }
}
void S() {
        if (lookahead=='(') {
                        match('('); S(); match(')'); S(); // 재귀
        }
        else
                ;)
}
</code>
</pre>


> 변수와 바인딩(4-2)
* 변수(variable) 주요 4대 속성의 일반적인 바인딩 순서 : 변수명->타입->주소->값  순서
* 1) 변수 : 데이터를 저장하거나 나중에 사용할 수 있도록 메모리를 추상화한 것.
  * 변수의 6가지 속성: 변수명, 타입, 주소, 값, 영역, 속성
* 2) 바인딩 : 언어 구성 요소의 속성이 구체적으로 결정되는 것을 의미함.변수와 관련된 속성을 연관시키는 것) ex) int x = 21, x에 21이라는 속성 대입
  * 바인딩 시간(바인딩이 일어나는 시간)의 종류
    * 언어의 정의 시점 (연산자의 의미, 수의 의미 등)
    * 언어의 구현 시점 (타입의 자릿수, 수의 표기법 등)
    * 컴파일 시점 (변수의 타입 등)
    * 링크 시점 (라이브러리 함수의 내용 등)
    *	로드(load) 시점 (변수의 주소 등)
    *	프로그램 실행 시점 (변수의 값 등)
  *	정적 바인딩 (static binding) : 컴파일 방식, 컴파일 시점에 이루어짐 (바인딩 시각이 언어의 정의 시점부터 로드 시점까지, 로드 시점에 정적 세그먼트의 주소를 바인딩)
  *	동적 바인딩 (dynamic binding) : 인터프리터 방식 (실행 시점에 동적 세그먼트의 주소를 바인딩), 속도 다소 느림(python)
* 3) 영역
  * {} 안에서 유효범위 가짐
  * 영역 지정 연산자


> 5주차
학습목표
1) 타입의 개념(변수의 속성 중 하나)
   - 데이터 집합 
      ex) 정수형 집합 { ... -3, -2, -1, 0, 1, 2, 3 ... }
   - 연산 집합
      ex) 연산자 집합 { =, +, -, * , /, % ... }
   - 타입 안정성(type safety) : 강타입(strongly typed), 약타입(weakly typed), 무타입 (상대적인 분류이며 정확한 분류 기준은 없다)
     - 타입이 안전하다 = 타입 에러를 일으키지 않을 것이 보장이 된다
     - 분류하는 것이 무의미할 수 있다.
     - 약타입: 묵시적 형변환이 일어날 수 있음(java는 강타입언어지만 묵시적 형변환 일어남, go는 강강타입이라서 묵시적 형변환 일어나지 않음)

2) 타입의 분류기준(타입의 종류 분류 기준)
* 사용자의 개입에 따라
  * 원시타입 (primitive type)
    * 사용자의 개입 X, 미리 정의된 내장된 타입
  * 사용자정의타입 (user-defined type)
    * 사용자의 개입 O
    * 배열(배열의 크기를 사용자가 지정), 구조체
* 데이터 요소 형태에 따라 
  * 단순타입
    * 데이터 집합의 요소가 하나의 타입으로만 구성(스칼라 타입)
    * float, char 등
  * 복합타입(구조체)
    * 데이터 집합의 요소가 데이터들의 구조를 구성
    * 배열, 클래스, 구조체 등

3) 단순타입
* 정수형
* 실수형 (IEEE 754) : 부호/지수부/가수부
  * float (32bit) 단정밀도 single
    * 1bit / 8bit / 23bit (부호, 지수부, 가수부 합해서 32bit)
  * double (64bit) 배정밀도 double
    * 소수점이 6자리 이상 넘어가면 double, float24 사용해야 정확
    * 1bit / 11bit / 52bit (부호, 지수부, 가수부) 
    (예) 십진수를 16진수로 바꾸기
      11.125(10) -> hexadecimal
      1) 부호비트
      0 
      2) 소수점 앞자리와 뒷자리를 2진수화 시킨다.
      1011.001
      10110.01 * 2e-1
      101.1001 * 2e+1
      3) 정규화 (소수점을 이동시켜 왼쪽에 1만 남게 만든다)
      1.011001 * 2e+3
      4) 가수부 부분에 정규화된 소수점 오른쪽 부분을 먼저 넣고 남는 부분은 0으로 채워넣는다.
      0 / 지수 / 011001 00000000000000000
      single일 경우 bias +127
      (double일 경우 bias +1023)
      0000 0000  -127  (특수용도)
      0000 0001  -126  (e min)
      ...
      0111 1111      0
      1000 0000      1
      1000 0001      2
      1000 0010      3 (130)
      ...
      1111 1110  +127  (e max)
      1111 1111  +128  (특수용도)
      0 / 1000 0010 / 011001 00000000000000000
      0100 0001 0011 0010 0000 0000 0000 0000
      0x41320000
* 지수 부분의 크기를 정수화 하기 때문에 빠른 실행속도 얻음
* 지수+bias 하면 정수 나와서 정수형태의 비교가 가능하기 때문에 빠름
	121.0(10) vs 0.0062(10)
	0111 1001.0 (2)             ->    1.111001 * 2e+6
	0.000000011001011... (2)   ->    1.1001011... * 2e-8

	6+127 = 133(10)  = 1000 0101(2)
	-8+127 = 119(10) = 0111 0111(2)
        참고:http://binaryconvert.com/


> 6주차 두번째 수업
3) 단순타입
* 정수형 (저번시간)
* 실수형 (저번시간)
* 문자형 (두 가지 방식: ASCII, Unicode)
  * C/C++ : 1byte char, 2byte wchar_t
	* JAVA : 2byte char
  * Go : 1~4byte rune literal(가변적인 길이 가짐)
* 논리형
	true, false
* 열거형(enumerate)
  * 사용자 정의 타입, 프로그래밍 언어에서 제공하지 않음
  * 이름들 사이에 순서 관계를 정할 수 있음
  * 예) enum Cplusplus {PASS, FAIL}; // PASS = 0, FAIL = 1
  * 영향을 미치는 boundry를 서로 다른 영역에 넣음(c++11 전의 사용 방법)
    * namespace freshman {PASS, FAIL};
  * enum class freshman {PASS, FAIL}; c++11부터 enumclass 사용해서 해결
  <img src="{{ site.baseurl }}/images/enumclass.png" width="30%" height="30%">
4) 복합타입
* 배열(array)
  * 같은 타입의 데이터의 모임
  * primitive 타입의 배열은 초기 값을 가진다.(integer일 때 0, 실수형일때 0.0)
  * refernece(참조형) 타입의 경우 배열 선언 시 초기값은 Null값을 가진다
* 문자열형(String)
     - sequence of byte(연속적으로 나열되어 있는 바이트)
     - immuatable(한번 만들어지면 수정 불가능)
     <pre><code>
     for idx, r := range "123" {
             fmt.Println(idx, r)
     }
     </code></pre>
     출력 : 0 49 / 1 50 / 2 51
* 연관배열(Associated Array Type) dictionary(파이썬), map(c++) 구조
  * 연관 배열: key와 value의 구성
    * 동질형 데이터의 순서가 "없는"ㄴ 집합
     - 연관배열(key, value), 해싱 (hash table)
       O(1),  Worst case O(n) 시간복잡도 list와 유사
       직접적인 산술 연산에 적용해서 아이템이 저장되어 있는
       테이블의 주소를 계산하여 아이템에 접근.
* 해싱
* 구조체, 공용체
* 포인터형, 참조형 (cpp 에서 int &rid = id)

*** PL week6 015(세번째 수업)부터 들으면 됨


> 7주차
학습목표
1) 수식, 식, 표현식 (Expression)
  * 값을 나타내는 표현... 프언에서는: <strong>자료</strong>
  * 계산을 표현하는 기본적인 수단들로 구성이 됨(연산자, 피연산자 등)
    * 단항: System.out.println(++a)
    * 이항: System.out.println(a+2)
      * LISP언어에서는 (= a 2) 라고도 씀(언어마다 차이가 있음)
    * 삼항: String k = (i%2!=) ? "홀수":"짝수"
    * sizeof, multiple(a, b)도 연산자가 될 수 있음
2) 식의 평가
   * 연산자의 평가순서 (Operator Evaluation)
     * APL: 우결합("<-", 우에서 좌결합), 우선순위 동등 (예. a-b+c)
       * c++
       <img src="{{ site.baseurl }}/images/aplc++.png" width="30%" height="30%">
       <img src="{{ site.baseurl }}/images/apl2c++.png" width="30%" height="30%">
     * 좌결합
       * JAVA
       <img src="{{ site.baseurl }}/images/adljava.png" width="30%" height="30%">
     * Ada: &#42;&#42;(지수연산자) But 결합법칙이 성립하지 않기 때문에 a&#42;&#42;b&#42;&#42;c : 신텍스 에러 발생
   * 피연산자의 평가순서 (Operand Evaluation)
3) 단락회로 평가 (Short Circuit Evaluation)
   * 모든 operate를 수행하지 않더라도 값이 나오는 경우(a값이 영향을 미치지 않음)
   * 예) (a || true) =  true, (a && true) = false
4) 중복 연산자 (Overloaded Operators)
   * 예) System.out.println("inha" + "univ") -> inha univ
5) 문장 (Statements)
   * 선언문
     * 변수는 선언문을 통해 변수 이름과 타입을 바인딩해야 이용 가능
     * 함수도 선언문을 통해 명시하여야 사용 가능
   * 실행문
     * 대입문 ( := Algol, Pascal, Ada 등 // = Cpp, Java, Go 등)
       * 약타입 언어: 묵시적 형변환 일어남 ex)c++
       * 강타입 언어: 형변환 일어나지 않음 ex)java, go
     * 제어문
       * 조건문 if, switch
       * 반복문 for, while 등





> 8주차 수업
* 1) 서브프로그램 (Subprogram)
  * 프로시저(Procedure), 함수(Function), 서브루틴(Subroutine)
  * 프로시저: 명시적인 반환 값이 없는 subprogram
  * 서브 루틴: 프로그래밍 언어 초기의 프로시저, 인쇄 전달이 명확하지 않고 entry point가 여러 가지 일 수 있음
  * 최근의 프로그래밍 언어는 함수 형태만 지원함
  * 서브프로그램의 구성(?)
    * 1 Entry Point(입구가 하나)
    * n Exit Point(출구가 여러 개 일 수 있음)
    * Default exit or return exit(리턴을 통한 명시적인 출구 지정 가능)
    * Flow 이전
    * Flow 복귀
* 2) 매개변수(Parameter)와 전달방식(Passing Mechanism)
  * 매개변수: 외부로부터 전달된 정보를 얻기 위해 프로그램의 정의 부분에 선언한 변수
  * 인수: 서브프로그램 호출 부분에서 매개변수로 전달될 의도로 사용된 수식
  * 서브프로그램 선언 : 서브프로그램 프로토타입 (프로토콜만 명시)
  * 서브프로그램 정의 : 서브프로그램 헤더 및 구현 { }
    * 값 전달(자료를 물리적으로 전달, 인수를 전달하는 데 효율이 좋지 못함)
      int test(Matrix m, int r, int c);  //   int test(const Matrix* m, int r, int c); 
    * 참조 전달
      * aliese라는 문제가 발생할 수 있음
      * 메모리 영역 x에 별명 n1, n2를 주면 헷갈릴 수 있음
      * 형식 인수와 전역 변수가 충돌할 때도 문제가 발생할 수 있음
    * 값-결과 전달(ALGOL 68, Ada)
    * 이름 전달
      * 치환
      * 간단한 변수가 인수로 주어질 경우
      * 배열 등이 실인수 형태로 주어질 경우

precedure double(x);
	integer x;
begin
	x := x * 2;
end;


i := 3;
double(i);
c[i] := 5;
double(c[i]);


i := 3;
i := i * 2;
c[i] := 5;
c[i] := c[i] * 2;



precedure swap(a, b);
	integer a, b, temp;
begin
	t := a;
	a := b;
	b := t;
end;



i := 2;
x[i] := 5;
swap(i, x[i]);


i := 2;
x[i] := 5;
t := i;
i := x[i];
x[i] := t;



TTT(틱택토)
+----+----+----+
|       |      |       |
+----+----+----+
|       |      |       |
+----+----+----+
|       |      |       |
+----+----+----+

APPLE BASIC (수행 흐름만 제어됨, entry point도 명확하지 않음)
1 PRINT "+----+----+----+"
2 GOSUB 6 (함수호출 세 번 일어남, 6번 라인으로)
3 GOSUB 6
4 GOSUB 6
5 END
6 PRINT "|       |      |       |"
7 PRINT "+----+----+----+"
8 RETURN


1 GOSUB 7
2 GOSUB 6
3 GOSUB 6
4 GOSUB 6
5 END
6 PRINT "|       |      |       |"
7 PRINT "+----+----+----+"
8 RETURN
