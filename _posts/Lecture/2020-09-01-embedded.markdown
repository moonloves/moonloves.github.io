---
layout: post
title: Embedded Software
date: 2020-09-01 14:30:00 +0900
category: Lecture
---

# EMBEDDED SOFTWARE :)

## 임베디드 소프트웨어의 정의
> #### 1. 하드웨어와 소프트웨어의 Combination
* 작지만 하드웨어와 소프트웨어를 가지며, 어떤 기능을 수행
* 예) 컵의 특징을 추정하는 임베디드 시스템


> #### 2. Dedicated Function
* 특수한 목적을 가짐
* Dedicated Purpose 예) 휴대전화(통화가 목적), 전자레인지(요리가 목적)
* 반댓말: General Purpose 예) 컴퓨터

> #### 3. Cross-Development platform(교차개발횐경)
* 프로그래머의 관점에서 임베디드 시스템의 특징
* 일반 개발 환경: 프로그램 작성 -> 컴파일 -> 러닝
* 교차 지원 환경: 프로그램 작성 -> 컴파일 -> 다운로딩 -> 러닝
* 이 때, 프로그램 작성과 컴파일은 Host에서, 다운로딩과 러닝은 Target에서 수행
* Host에서 '개발', Target에서 '수행'
* Host(PC)와 Target(Eembedded SW)의 연결고리는 cable 및 wireless network, USB

> #### 4. Real-time features (실시간특징)
* Real time 시스템: 시간에 대한 요구 포함
* deadline을 놓쳤다면?
  * Hard real-time system: 데드라인 놓쳤을 경우 영향이 재앙적 예) 비행기의 제어시스템
  * Soft real-time system: 데드라인 놓쳐도 영향이 미비 예) 비디오 플레이어

> #### 5. Embedded
* 임베디드 시스템은 커다란 시스템에 속한 내장형 시스템
  * PC <- 키보드, 마우스
  * 자동차 <- 브레이크, 대시보드


### 널리 퍼진 Embedded System

> #### 1. Smart Phone
* CPU의 성능이 향상됨에 따라 smart phone의 성능도 향상
* general purpose에 가까워졌지만, cross development가 필요하다는 점에서 여전히 embedded system

> #### 2. IoT
* 디바이스에 인터넷 기능을 넣어 통신이 가능하게 함으로써 디바이스들이 효과적으로 제어되도록 함


### Embedded Software Architecture

> #### Device Handling 과정(선수지식)

임베디드 소프트웨어의 구성

1. Device check routine
* 디바이스를 케어함
* interrupt service routine(ISR), interrupt handler라고도 불림
  * handler를 빠르게 수행하는 것이 중요
  * 가능한 한 짧은 기간동안 수행하는 것이 중요
  * 즉각적인 반응을 요구
* 외부 디바이스(센서, 다른 디바이스 등)으로부터 얻은 데이터를 처리

2. Data processing routine
* 디바이스로부터 얻은 데이터를 연산 및 처리
* task routine이라고도 불림
* 시간이 오래 소요됨


> #### Embedded Hardware에 적절한 Software인지, Application에 적절한 Software인지에 따라 5개 중 선택하여 사용
#### 1~5까지 점차 업그레이드

> #### 1. Round-robin
* 가장 간단한 임베디드 소프트웨어 아키텍쳐로, 간단한 임베디드는 이를 사용
* device check routine과 data processing routine이 번갈아가며 수행
* 단점: 마지막 디바이스의 device check routine이 수행되기까지 오랜 시간이 소요됨 (=device check routine의 수행이 지연될 수 있음)

```ruby
while(1) {
    if (Device A needs service)
        take care of A; -> Device check routine(ISR)
        process data from A; -> Data processing routine

    if (Device B needs service)
        take care of B; -> Device check routine
        process data from B; -> Data processing routine
    
    ...

    if (Device J needs service)
        take care of J; -> Device check routine
        process data from J; -> Data processing routine
}
```


> #### 2. Round-robin with interrupt
* round-robin의 문제점 해결
* ISR이 task routine보다 우선순위가 높음
* ISR에서 우선순위를 가질 수 있음
* 모든 task code는 같은 우선순위를 갖기 때문에, FIFO 순서로 수행됨
* 방법
  * interrupt service routine을 별도의 함수로 구현
  * 해당 디바이스의 input 데이터가 도착했을 경우에 flag를 셋팅
  * 메인에서는 flag의 셋팅 여부를 체크
  * 셋팅 되었을 경우에 해당 device check routine에 해당하는 task routine을 수행하도록 지원
  * 따라서 디바이스와 연관된 루틴이 매우 빠르게 수행이 가능하게 됨.
* interrupt service의 빠른 수행 가능
  * interrupt service routine이 별도의 함수로 구현됨
  * interrupt service routine이 task routine을 포함하는 main loop보다 우선순위가 높음

```ruby
while(1) {
    if (A flag is set)
        A task code
    if (B flag is set)
        B task code
    if (C flag is set)
        C task code
}
ISR A : Set flag A
ISR B : Set flag B
ISR C : Set flag C
```


> * Round-robin vs. Round-robin with interrupt
  * 임베디드 소프트웨어의 구성(device check routine과 task routine의 차이를 잘 이해)
  * Round-robin with interrupt
    * ISR을 별도의 함수로 구현
    * flag를 만들어 task routine보다 device check routine의 우선순위를 높임
  * Round-robin
    * device check routine과 task routine이 번갈아가며 수행



> #### 3. Function queue scheduling
* Round-robin with interrupt의 문제점: task routine이 루프 안에 있기 때문에 긴박한 task를 먼저 수행할 수 없음
  * Function queue scheduling: task 간의 우선순위를 부여함으로써 이를 해결한 스케줄링 기법
* Round-robin with interrupt와 같은 점: interrupt service routine > task
  * flag의 역할
* Round-robin with interrupt와 다른 점: task 간에도 우선순위가 있음
  * task를 function으로 구현
* 동작 방식

```ruby
while(1) {
    Examine the function queue (function queue를 살펴보고 수행)
    and then perform the highest-priority function;
}

ISR A : Set flag A
ISR B : Set flag B
ISR C : Set flag C

```

>> * 해당 function을 function queue에 삽입하는 연산을 수행
* 동작 순서: ISR -> function queue에 삽입 -> ISR -> function queue에 삽입 -> ... -> function queue 순서대로 task 수행
* Function queue scheduling의 문제점: No preemption
  * 새치기 금지
  * 우선순위가 더 높은 task가 들어와도, 기존에 수행되던 function이 수행되어야함
  * 긴박한 task의 수행이 지연될 수 있음



> #### 4. Real-time operating system
* Function queue scheduling 문제점을 해결
  * task 간의 Preemption 지원
* task 간의 우선순위는 누가 결정? -> scheduler
  * 모든 task들이 정해진 deadline 내에 수행이 완료되도록 스케줄링



> #### 5. Embedded Linux
* 리눅스는 원래 데스크탑 시장을 위해 개발되어 사용되었는데, 임베디드 시장에도 급속도로 확산되고 있음
* Desktop Linux를 Embedded System에 적합하도록 최소화한 것
* Desktop Linux에 필요한 많은 component를 제거하고, 성능이 낮고 저장 용량이 작은 embedded system에 적합하도록 Linux를 최소화하여 설계, 구현한 것
* 장점
  * Open source
  * 많은 utilities
  * low cost 등등
* Embedded Linux vs Desktop Linux
  * 1. size
    * kernel에서 불필요한 요소를 제거하여 사이즈 최적화
  * 2. kernel configuration
    * kernel에서 불필요한 요소를 제거한 것
  * 3. Utilities
    * 교차 개발 환경을 위한 utility가 추가됨
    * flash 메모리를 위한 device driver 추가
  * 4. GUI tools
* 임베디드 리눅스를 RTOS에 맞도록 개발하는 프로젝트들이 진행되고 있음


> ### Embedded Software Architecture 5가지 비교
1. Round-robin
* while 루프에서 수행되는 순서대로 프로그램이 진행
* ISR -> task -> ISR -> task -> ...
  * interrupt service routine은 prompt processing임에도 불구하고 task루틴이 interrupt service routine보다 먼저 수행될 수 있음
* task의 우선순위나 interrupt service routine의 우선순위가 상관 없을 때 사용
2. Round-rogin with interrupt
* ISR > task
* ISR -> ISR -> ISR -> ... -> task -> task -> task
* task 간의 우선순위X
3. Function queue scheduling
* ISR > task
* ISR -> ISR -> ISR -> ... -> task -> task -> task
* task 간의 우선순위O
  * task가 function 형태로 구현
* task 간 preemption 지원X
4. RTOS (Real time operating system)
* ISR > task
* ISR -> ISR -> ISR -> ... -> task -> task -> task
* task 간의 우선순위O
  * task가 function 형태로 구현
* task 간 preemption 지원O
5. Embedded Linx
* desktop Linux를 임베디드 환경에 맞춰 최적화
* open source, utilities, library, ... 등의 장점덕분에 개발이 쉬움


> ### Embedded software Architecture 예시
1. Plant control(공장 제어)
* 
2. Feature phone software
* 

> ### Platform
* 최근 임베디드 시스템의 중요한 특징 중의 하나로, 플랫폼 소프트웨어가 임베디드 소프트웨어에 많이 사용이 됨
* 플랫폼 소프트웨어: 안드로이드 OS, 타이젠 OS 등
* 플랫폼이 임베디드 시스템에 많이 사용되는 이유
  * 플랫폼: 커널 위에 탑재되어 프로그래머에게 프로그램 인터페이스를 제공하여 임베디드 소프트웨어를 효과적으로 프로그래밍 할 수 있도록 함



## Embedded Software - RTOS

> ### RTOS Overview
* Real-time system
 * 정확한 결과를 산출
 * 데드라인 내에 해당 결과를 산출해야함 (일반 프로그래밍 시스템과 다른 점)
   * Timing constraints 가짐
   * deadline, period, execution time 등
 * application
   * timing constriants를 요구하는 모든 시스템들이 real time 시스템이며, 주로 hard-time system을 real time application이라고 함


> task 분류
1. Deadline을 놓쳤을 때의 시스템의 가치에 따라
* Hard task
  * deadline을 놓쳤을 때 시스템의 가치는 마이너스 무한대까지 떨어질 수 있음
  * 데드라인을 반드시 만족시켜야 하는 시스템
  * 예) 무기, 우주선, 원자력 발전소 등
* Soft task
  * deadline을 놓쳤을 때 시스템의 가치가 점차적으로 떨어짐
  * 유튜브 스트리밍 환경(끊김 현상 발생)
* firm real-time task
  * deadline을 놓쳤을 때 
  * 시스템의 가치가 0이 됨
2. 주기성에 따라
* periodic task
  * 주기적으로 task가 수행되는 task
  * 임베디드 시스템에서 수행되는 대부분의 task
  * 예) 센서로부터 읽은 데이터를 주기적으로 처리하여 output 데이터 산출, 액츄에이터 구동
* aperiodic task
  * task가 언제 도착할 지 모름
  * sporadic task: aperidic task의 일종이며, interarrival time이 정해져 있음
3. task의 중요성에 따라
* 컴퓨터의 자원이 유한하기 때문에 분류되는 task
* critical task
  * 중요한 task, 데드라인 내에 실행되어야 하는 task
* non critical task
  * 덜 중요한 task, 데드라인을 놓쳐도 되는 task


> ### Real-time operating systems (RTOS)
* Real-time system에 사용되는 운영 체제
* RTOS의 Real-time 이라는 단어 때문에, 모든 작업을 실시간으로 처리할 수 있는 환경을 제공하는 매우 빠른 운영체제라고 하는 오해 존재
  * Real-time이란 주어진 시간 안에 작업이 완료되어 결과가 주어져야하는 것을 의미
* RTOS는 주어진 작업을 정해진 시간 안에 수행할 수 있는 환경 제공
* General purpose system vs. RTOS
  * General purpose system:<br>
  H/W 자원을 얼마나 공평하게 분배할 것인지에 주력
  * RTOS: <br>
  H/W 자원을 좀 낭비하더라도 작업의 시간 제한을 맞추는데 주력
* 공평성의 개념보다는 우선순위가 높은 task가 많은 시간 동안 수행
* RTOS의 요구사항
  * 예측 가능하고 일정한 응답 시간을 지원
  * 우선 순위 기반 스케줄링 지원
  * Deadline 기반 스케줄링 지원

> Several concepts
(1) Foreground/Background
* Foreground
  * 전경 프로세스는 인터럽트 레벨이라고 부르며, interrupt service routine을 통하여 비동기적으로 발생하는 이벤트를 처리
* Background
  * 배경 프로세스는 태스크 레벨이라고 부르며, 응용 프로그램은 요구되는 동작을 수행하기 위해서 특정한 모듈이나 함수를 호출하는 무한루프로 구성
  * round-robin에서는 루프 형태로 수행됨
(2) Multitasking
* Multitasking
  * Embedded system에서의 task는 하나의 문제(목적)를 풀려고 하나의 큰 응용 프로그램을 논리적으로 나눈 개념
  * 여러 task들이 병렬적으로 수행
  * 목적을 수행하기 위해서 여러 기능들이 동시에 수행될 필요가 있고 이를 순차적으로 프로그램 하기 어렵기 때문에, 기능 블록의 모듈화 및 CPU의 효율적일 사용이라는 목적에서 Multitasking이라는 개념이 발생
(3) Resource
* 프로세스나 태스크가 사용하는 모든 요소
* 하드웨어 디바이스: CPU, I/O device, Memory, Storage
* 프로그램 상에서 쓰이는 object: 구조체, 변수, 또는 배열
(4) Shared Resource
* 하나 이상의 프로세스나 태스크가 공통적으로 사용할 수 있는 resource
* 멀티 태스킹에서 resource 접근 순서를 잘 통제해야함
* Data corruption을 막기 위해서 각 task는 미리 해당 자원에 대한 exclusive access를 얻어야함
* RTOS에서 우선 순위 높은 task가 미리 shared resource에 대한 접근권한을 얻어야함
(5) Scheduler
* ready 상태에 있는 여러 개의 task 중에 다음에 어떤 task를 수행할 것인지를 결정
* 일반적으로 가장 높은 priority의 task를 수행시키는 '우선순위기반 스케줄링' 방법을 사용
(6) non-preemptive kernel/preemtive kernel
* 둘 다 ISR > task
* ISR이 끝날 때 스케줄러 루틴이 호출되어 우선순위가 가장 높은 태스크 체크
* non-preemptive kernel
  * 어떤 task가 수행되고 있을 때 kernel이 중간에 해당 task의 수행을 중지시키고 다른 task를 수행시킬 수 있는 능력이 없음(새치기 불가능)
  * 다른 말로 cooperative multitasking이라고도 함(협업필요)
  * 비동기적 이벤트(interrupt)는 ISR이 처리하며, ISR은 항상 인터럽트가 발생한 태스크로 되돌아옴
  * 장점
    * 인터럽트 지연시간이 짧음
    * 세마포어를 사용해서 공유데이터를 보호할 필요가 줄어듦
  * 단점
    * 현재 실행 중인 task가 CPU를 자발적으로 양도해야 하기 때문에 상위 우선순위의 태스크가 실행 준비 상태가 되더라도 실제로 실행될 때를 기다려야함->응답성이 낮음
    * 데드라인 놓칠 수 있음
  * RTOS에서 사용 X
* preemptive kernel
  * CPU의 제어권은 실행준비가 된 최상위 우선순위 task로 항상 넘어감
  * ISR이 최상위 우선순위 task를 실행준비 상태로 만들면, ISR이 종료될 때 
  인터럽트가 발생했던 task는 중단되고 새로운 상위 우선순위 task가 수행
  * RTOS에서 사용 O
(7) cyclic executive
* multitasking real-time system 운영체제의 가장 간단한 형태
  * 루프 형태로 되어 있어 특정 task의 일부를 수행하도록 하드 코딩됨
  * 스케줄링 데드라인을 만족시키기 위해 어떤 태스크의 어떤 파트를 수행할지에 대한 스케줄링 루프를 미리 결정하는 것
  * 여름방학 시간표; 어떤 시간에 무엇을 할지
    * 이미 데드라인을 고려하여 스케줄링 아웃라인을 설정하고 해당 루틴대로 반복적으로 수행
* 장점
  * 구현이 대단히 간단
  * 오버헤드가 적음
  * 모든 운영체제의 동작을 예측하기 쉬움
* 단점
  * 미리 정해진 작업들 외의 다른 작업을 추가하기 어려움
  * 작업 수행 중 선점이 불가능
  * 모든 스케줄링 수작업으로 이루어짐

> ### RTOS characteristics
* multitasking
  * OS가 사용된다 = OS 위에서 여러 개의 task가 병렬적으로 수행된다
  * RTOS도 여러 개의 태스크를 병렬적으로 수행되기 때문에 multitasking이 지원되어야 함
* fast context switching
  * 여러 태스크가 번갈아가며 수행되기 때문에 context switching이 일어남
    * context switching: 태스크 간의 전환
  * 태스크의 데드라인을 만족시키기 위해 context switching이 빠르게 진행되어야 함
* small size
  * 임베디드 시스템은 제한된 storage 공간만을 가지고 있으므로 OS도 작은 커널 사이즈를 유지해야 함
* fast processing of exeternal interrupts
  * interrupt 발생 시 빠르게 처리되어야 함
  * interrupt 발생 시 interrupt handler 수행
* task scheduling can be enabled by external interupt
  * RTOS에서 인터럽트 처리가 끝날 때마다 스케줄링 결정이 내려짐
  * 가장 많이 발생하는 인터럽트: timer interrupt
* simple command interpreter 권장
  * 커멘드를 받고 해석해서 수행하는 프로그램을 의미
* intertask communication and synchronization
  * 프로세스 간의 커뮤니케이션이 많이 발생
  * RTOS는 커널은 간결하게 작성하고, 많은 기능들을 task 레벨로 올려서 task 수가 많고 task 간의 동기화를 통해 여러 task 간에 동작하는 구조이기 때문
* no memory protection: the kernel and user execute in the same space
  * Windows와 Linux와 같은 monolithic 커널에서 프로그래밍을 하면 array나 pointer를 잘못 썼을 경우 오류메세지 확인 가능
  * RTOS는 커널과 유저프로그래밍이 동일한 공간에서 동작을 하기 때문에 메모리 보호가 잘 지원이 되지 않음
  * 프로그래밍 시 주의 필요
* application programs use system calls
  * 태스크 프로그램에서 시스템 콜을 호출하여 RTOS에서 제공하는 기능 사용
* limited memory usage
  * 임베디드 시스템이 목적이기 때문
  * 메모리 영역을 한정적으로 할다 
* Microkernel
  * 커널을 micro화
  * 핵심적인 기능만 커널에 넣고, 많은 기능을 task level로 옮김
    * 핵심적인 기능: task 관리, 스케줄링 기능
  * 태스크 간의 커뮤니케이션이 매우 중요
  * monolithic kernel과 반대 개념

> Comparison with conventional OS(monolithic OS)
| attribute | RTOS | conventional OS |
|:---------:|:----:|:---------------:|
| virtual memory | none | yes |
| application prog. | single purpose | general purpose |
| I/O processing | based on priority | fairness(CFS) |
| delivery of massive data between tasks | speed up by passing pointers, etc| use system service like pipe, mailbox|
| resource allocation | static | dynamic(runtime) |
| file system or disk | none or limited | yes |

> ### RTOS functions (라고 쓰고 RTOS의 핵심적인 기능(커널에서) 이라고 읽는다)
1. task management
  * task 생성, 삭제, 지연, 재시행
  * 스케줄링 정보 관리(우선순위, 스케줄링 정책 등)
2. intertask communication, synchronization
  * semaphore
  * mailbox, queue
  * event flag
3. 기본적인 메모리 관리
  * 동적 메모리 할당, 해지
  * 특정 메모리 잠금 기능
  

> #### RTOS Structure


> #### Multitasking Techniques
* big loop
  * application(task)들이 일반적으로 루프 안에서 실행
* coroutine multitasking
  * application(task)를 수행하기 위해 공통으로 사용되는 루틴
  * 여러 개의 coroutine들이 응용 프로그램들을 작성할 때 사용될 수 있음
* interrupt-driven scheduling
  * task가 인터럽트에 의해 활성됨
  * interrupt handler가 끝날 때마다 스케줄링 결정 내려짐
* multitasking executive
  * 가장 간단한 RTOS

> ### RTOS Fundamental concepts
1. Scheduling
  * 현재 ready인 task 중 하나를 선택
  * 스케줄링 알고리즘
    * nonreal-time : <br>
    FCFS, round-robin, priority-based, shortest job first 등
    * real-time : <br>
    rate monotonic, earliest deatline first 등
      * 둘 다 기본적으로 priority 기반 스케줄링 기법, 다만 priority를 정하는 방식에 따라 나누어짐
    * rate monotonic 알고리즘:
      * 주기가 짧은 task에 우선순위 부여
      * 우선순위가 바뀌지 않는다면 최적의 스케줄링 기법
      * RTOS에서 optimal: 가능한 한 많은 task들이 데드라인을 만족할 수 있음
    * earliest deadline first 알고리즘:
      * 매 순간 데드라인에 가장 근접한 task에 우선순위 부여
      * task의 이용률을 최대화함
  * priority assignment
    * priority 할당 기준이 중요
      * importnace, criticality(task의 중요도), period, deadline
      * execution time, arrival time, elapsed time after ready
    * method
      * static (예. rate monotonic)
      * dynamic (예. earlies deadline first; 매 순간마다 검사하므로)

2. Interrupt
3. Synchronization
4. Clock ticks


> MicroC/OS II RTOS에서 highest priority를 찾는 방법
* Ready list를 관리



#### uC/OS2 kernel internals
> uC/OC2 커널 개요























#### Synchronization 1
> Outline
* Event control block
* Mailbox
* Message queue
* Semaphore
* MUTEX semaphore
* Event flag
  * Event flag를 제외하고 네 가지 동기화 기능 모두 ECB(Event Control Block)사용

> Event Control Block
* OS XXX Create
* OS XXX Del
* OS XXX Pend : Wait for XXX
* OS XXX Post : Release for XXX (메세지 넣음)
* OS XXX Accept : A non-blocking version of OS XXX Pend
* OS XXX Query
* XXX : 사용하고자 하는 동기화 함수의 이름 넣어주면 됨 (예. MBox)
* event flag를 제외하고 모두 event control block에 의해 커널에서 관리됨.
  * 예) semaphore을 생성하면 커널에서 자동으로 semaphore와 관련된 ECB가 생성됨 

> ECB 구조체의 구성
* OS_EVENT_TYPE
* OSEVENTCnt
* OSEVENTPtr
* OSEVENTGrp
* 0~63 (bitmap 구조)
(1) OS_EVENT_TYPE<br>
* ECP의 용도를 나타내는 필드
* OS_EVENT_TYPE_SEM, OS_EVENT_TYPE_MUTEX, OS_EVENT_TYPE_MBOX, OS_EVENT_TYPE_Q<br>
(2) OSEVENTCnt<br>
  * 세마포어 : 세마포어 카운터 저장
  * 상호배제 세마포어 : PIP 저장 (priority inversion problem)<br>
(3) OSEventPtr<br>
  * 메일박스나 메세지 큐일때만 사용
  * 해당 구조체를 가리키는 포인터<br>
(4) OSEvnetGrp, OSEventTbl[]<br>
  * OSRdyTbl[], OSRdyGrp와 비슷한 형태
  * 이벤트의 발생을 기다리는 태스크들의 리스트
  * 현재 수행중인 태스크는 OSRdyTbl과 OSRdyGrp가 관리
  * 특정 이벤트를 기다리는 태스크는 OSEventTbl이 OSEventGrp관리<br>
  * insert a task to event wait list
  * remove a task from event wait list
  * finding the highest priority task from event wait list
(5) Free event control block list
  * 할당되는 ECB의 개수는 응용 프로그램에서 요구하는 세마포어, 메일박스, 메시지 큐에 따라 다름
    * ECB의 최대 개수는 OS_CFG.H의 OS_MAX_EVENTS 에서 정의됨
    * OS_INIT이 호출되면 모든 ECB는 Free event control block list에 연결
    * 세마포어나 메일박스 큐가 생성되면 free event control block list에서 삭제되고 초기화됨

> MailBox
(1) mailbox 생성<br>
* OS_EVENT *OSMBoxCreate(void *msg)
  * 전달하고자하는 메세지가 저장됨
  * msg : 메세지에 대한 포인터
  * 리턴: 리턴 형식이 OS_EVENT* 즉 ECB
  * prevent->OSEventPtr = msg 가리킴<br>
(2) mailbox 삭제<br>
* OS_EVENT *OSMboxDel(OS_EVENT *prevent, INT8U opt, INT8U *err)
  * OS_EVENT *prevent: OS_Event *OSMBoxCreate의 리턴값(메세지의 위치)
  * INT8U opt: 메일박스 삭제할 때의 옵션
    * OS_DEL_NO_PEND: 기다리고 있는 프로세스가 있을 때에 삭제 x
    * OS_DEL_ALWAYS: 기다리고 있는 프로세스가 있든 없든 삭제 O
  * INT8U *err : 제대로 삭제 되었는지에 대한 여부
    * OS_NO_ERR 가 리턴되면 제대로 삭제된 것<br>
(3) mailbox에서 메세지 기다리기<br>
* void *OSMBoxPend(OS_EVENT *prevent, INT16U timeout, INT8U *err)
  * OS_EVENT *prevent: OS_Event *OSMBoxCreate의 리턴값(메세지의 위치)
    * OSEventPtr이 NULL이 아닌 포인터 값을 가지고 있을 때 OSMboxPend()가 호출되면, OSEventPtr 값을 msg에 저장하고, 메일박스는 비운다
    * OSEventPtr이 NULL 포인터 값일 때; WAITING
      * 가져 올 메세지가 없으므로 time out을 반영하여 waiting
    * 메시지가 메일 박스에 들어왔을 때, 그리고 OSMboxPend()를 호출한 이 태스크가 다시 HTP(Highest Priority Task)가 되었을 때
      * message는 호출한 태스크에 넘겨짐
  * INT16U timeout: 메세지를 기다리는 시간
    * 0이면 무한대로 기다림<br>
(4) mailbox에 메시지 보내기<br>
* INT8U OSMboxPost(OS_EVENT* prevent, void* msg)
  * 메세지를 메일박스에 저장<br>
(5) 기다리지 않고 mailbox에서 메시지 읽기
* void* OSMboxAccept(OS_EVENT* prevent)
(6) mailbox에 대한 정보 읽기
* INT8U OSMboxQuery(OS_EVENT* prevent, OS_MBOX_DATA* pdata)
(7) OSMboxPostOpt(OS_EVENT* prevent, void* msg, INT8U opt)<br>
  * mailbox에 대기 중인 모든 task에게 메세지를 broadcast할 수 있는 기능 추가<br>
(8) OSMboxAccept(OS_EVENT* prevent)
  * 호출 task를 대기 상태로 만들지 않고 메세지를 받을 수 있음
  * 전달 인자
    * prevent: 해당 mailbox의 ECB에 대한 포인터
  * OSMboxPend 함수의 non-blocking version

> 프로그램 예시를 통해 알아보기
OSMboxCreate 함수의 리턴값은 ECB의 주소를 의미하며, 이 값이 MBoxPend와 MBoxPost의 첫번째 인자로 들어간다. 그리고 OSMboxCreate의 파라미터를 통해 처음 메시지 위치를 null로 초기화해준다.<br>
OSMBoxPend는 ECB의 주소를 전달받고, 두번째 인자는 timeout을 받는다. 그리고 메세지가 도착하면 받을 위치를 설정해야하는데, 이를 리턴 값으로 설정한다. 이는 해당 메세지가 저장될 위치이다.<br>
OSMboxPost 함수는 첫번째 인자로 ECB주소를 전달받고 두번째 인자로 넘겨질 데이터가 저장될 주소가 넘겨진다. 넘겨질 데이터는 txmsg에 저장해주고 OSMboxPost 함수를 호출하면 mailbox에 txmsg가 저장이 되며, 이는 rxmsg에 의해 전달이 가능하다.

> Message queue
* 메일 박스와 차이점: 여러 개의 메시지를 전달하고자 할 때 사용



#### SYNCHRONIZATION 2 (6주차 첫번째 수업) :)
<br>
지금까지 한 것: Task syncronizatino 중 ECB, MailBox, Message Queue<br>
<strong>오늘 할 것: Semaphore, Event Flag</strong><br>
다음에 할 것: Mutex<br>

> Semaphore functions
1. OSSemCreate()
  * 세마포어 생성
  * 인자: 세마포어의 초기값
2. OSSemPost()
  * 세마포어에 이벤트 발생을 알림(signal)
  * 세마포어를 기다리는 태스크 중 가장 우선 순위가 높은 태스크가 실행(sem++)
3. OSSemPend()
  * 세마포어의 이벤트 발생을 기다림(wait)
  * 세마포어 값을 1감소(sem--)
    * sem > 0 : success
    * sem = 0 : 다른 태스크가 깨워줄 때까지 대기 상태
  * time out 값을 지정해 둦다면, time out 시간까지만 대기 상태
  * time out 시간이 지나면 에러 값을 가지고 리턴
4. OSSemAccept()
  * OSSemPend()와 비슷하나, sem=0이라도(세마포어가 사용가능하지 않더라도) 대기하지 않음
5. OSSemQuery()
  * 현재 세마포어의 상태를 알 수 있음


> 세마 포어의 사용 목적
1. 공유 변수 접근
<pre> <code>
OS_Event* sem; //  ECB 선언
sem = OSSemCreate(1); // 세마포어 생성, 세마포어의 초기값은 1

OSSemPend(sem, 0, &err); // sem = 0 이 되어 공유 변수 접근 가능해짐
<hr>
공유 변수
<hr>
OSSemPost(sem); // 공유 변수에서 빠져나감
</code></pre>
* 만일 다른 task가 OSSemPend를 호출하더라도 sem = 0이기 때문에 blocking됨
* 그래서 OSSemPend와 OSSemPost는 쌍으로 호출되어야 함
* race condition 발생을 막아줌
* 이로써 semaphore를 사용하여 critical section을 보장
2. 기타 task 간의 동기화
* 다른 태스크로부터 signal을 받을 때까지 기다리는 프로그래밍을 할 때 사용
<pre> <code>
OS_Event* sem;
sem = OSSemCreate(0);

OSSemPend(sem, 0, &err) or OSSemAccept(...)
</code></pre>
이면 다른 task에서 OSSemPost(sem)을 호출해 줄 때까지, 즉 다른 태스크로부터 signal을 받을 때까지 wait<br>
다른 태스크에서 signal을 주면 wake up

> Semaphore의 kernel internals
1. OSSemCreate
<pre><code>
OS_EVENT* OSSemCreate(INT16U cnt) { // cnt: 세마포어 초기값
  1. ECB 선언
  OS_ENTER_CRITICAl();
  2. Free ECB 리스트로부터 ECB를 하나 얻음
    2-1. OSEventFreEList의 ECB 포인터는 다음 ECB를 가리키도록 조정
  OS_EXIT_CRITICAL();
  3. ECB 타입을 세마포어로 지정
    3-1. 세마포어의 초기값을 지정
    3-2. wait list를 초기화(커널 내의 함수 OSEventWaitListInit(prevent) 사용)
}
</code></pre>
2. OSSemPend
<pre><code>
void OSSemPend(OS_EVENT* prevent, ITN16U timeout, INT8U *err) {
  1. prevent가 가리키는 ECB가 세마포어인지 검사
  2. 세마포어가 사용 가능한 경우(cnt > 0)이면 cnt-- 하고 리턴
  3. 세마포어가 사용 가능하지 않은 경우(cnt = 0)이면
    3-1. sleep하도록 하기 위해 태스크의 TCB상태를 OS_STAT_SEM으로 만듦
    3-2. timeout값 지정
    3-3. 태스크를 sleep 상태로 만듦(커널 내의 함수 OS_EventTaskWait() 사용)
  // 여기서부터 태스크가 sleep 상태가 됨
  4. OS_Sched()를 호출(task level의 스케줄링 함수)하여 우선 순위 높은 태스크를 실행
    4-1. 또는  다시 이 태스크가 실행될 때 timeout이 발생한 것이라면, OSEventTO()함수가 호출되고, ECB에의 링크가 끊어짐
}
</code></pre>
3. OSSemPost
태스크에서 보내는 시그널!
<pre><code>
void osSemPost(OS_EVENT* prevent) {
  1. prevent가 가리키는 EcB가 세마포어인지 검사
  2. 세마포어를 기다리는 태스크가 있다면
    2-1. 그 중 우선순위가 가장 높은 태스크를 ECB 대기리스트에서 제거하고는 실행상태를 만듦(커널 내의 OS_EventTaskRdy() 함수를 사용)
    2-2. OS_Sched() 호출(Rdy가 달라졌기 때문에 재스케줄링하여 우선순위 높은 태스크 찾음)
  3. 세마포어를 기다리는 태스크가 업삳면 세마포어 cnt++
}
</code></pre>
4. OSSemAccept
* NO wait
  * OSSemPend 함수에서는 cnt = 0이면 blocking되어 wait한다는 것이 차이점
<pre><code>
INT16U OSSemAccept(OS_EVENT* prevent) {
  1. 세마포어 cnt > 0 일 때만 cnt--되고 리터 
  2. OSSemAccpetI()를 호출한 부분에서는 리턴 값을 확인하여 0이 아닌 경우와 0인 경우를 구분해서 수행
}
</code></pre>
5. OSSemDel(): 세마포어 삭제 함수
6. OSSemQuery(): 세마포어 상태 얻는 함수


> ECB kernel functions
1. OS_EventWaitListInit(OS_EVENT* prevent)
  * ECB 초기화
  * OSSemCreate 내에서 호출됨
  * 세마포어, 메일박스, 메시지 큐 생성 시에 호출되는 함수
  * 단지 ECB를 기다리는 태스크의 리스트가 아직은 없다는 것을 표시
2. OS_EventTaskRdy()
  * 태스크를 준비 상태로 만듦
  * OSSemPost 내에서 호출
  * ECB가 시그널을 받아서, ECB를 기다리던 태스크 중 가장 우선순위가 높은 태스크를 실행 가능 상태로 바꿀 때
3. OS_EventWait()
  * 태스크를 어떤 이벤트에 대해 wait 상태로 만들기
  * OSSemPend 내에서 호출, sem=0이면(세마포어가 사용 가능한 상태가 아니면) wait으로 만들어주는 함수
  * 태스크를 준비 리스트에서 삭제
  * ECB의 대기 리스트에 태스크 삽입
4. OS_EventTo()
  * 이벤트를 기다리다가 timeout이 발생하여, 태스크를 준비 상태(ready)로 만듦
  * OSSemPend 내에서 호출
  * 타임 아웃으로 태스크 준비(ready) 상태 만들기
  * OSSemPend(), OSMboxPend(), OSQPend() 에서 호출


>#### Event Flag
* <strong>여러 이벤트</strong>에 대한 <strong>효과적인</strong> 동기화가 가능함 (이제까지는 효과적인 지원X)
* 일종의 <strong>자료구조</strong>로써, 각 비트는 특정한 사건(event)에 대응됨
  * Evnet flag 자체가 자료구조이므로 ECB를 사용하지 않음
* 이벤트가 발생하면 특정 비트를 1또는 0으로 설정
* 연산
  * OSFlagCreate()
  * OSFlagDel()
  * OSFlagPend()
  * OSFlagPost()
  * OSFlagAccept()
  * OSFlagAccept()
  * OSFlagQuery()
* 사용 목적
  * 태스크 동기화에 유용(특히 여러 task 간에)
    * 우선 순위 높은 태스크를 우선 순위 낮은 2개의 태스크가 특정 시점까지 블록킹 하는 경우
* MicroC OS2에서 제공하는 자료구조
  1. Event Flags Group Structure
  <pre><code>
  typedef struct { 
  INT8U OSFlagType;       // 이벤트 플래그 타입
  void* OSFlagWaitList;   // 기다리고 있는 task의 노드 위치 모두
  OS_FLAGS OSFALGFLAGS;   // event flag group이 가진 비트맵
  } OS_FLAG_GRP;
  </code></pre>
  2. Event Flags Node Structure
  <pre><code>
  typedef struct {
    void* OSFlagNodeNext;
    void* OSFlagNodePrev;      // 리스트 형태로 관리되는 노드들
    void* OSFlagNodeTCB;       // 각 TCB의 위치를 가리킴
    
    void* OSFlagNodeFlagGrp;   // Event Flag Group 위치 가리킴
    
    OS_FLAGS OSFlagNodeFlags;  // 각 event flag node가 가진 비트맵
    
    INT8U OSFlagNodeWaitType;  // ANY, ALL 등의 옵션
  } OS_FLAG_NODE;
  </code></pre>
* 프로그래밍 step
  1. Declaraion
  <pre><code>
  OS_FLAG_GRP* e_grp; // OS Flag Group 선언
  INT8U err;
  </code></pre>
  2. Creation
  <pre><code>
  e_grp = OSFalgCreate(0x00, &err); // OS Falg Group 생성, 비트맵 초기화
  </code></pre>
  3. Pend
  <pre><code>
  OSFlagPend(e_grp, 0x01, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0, &err);
  // 해당 필드 0x01을 옵션에 있는 값(set이니까 1)으로 세팅해줌
  </code></pre>
  4. Post
  <pre><code>
  OSFlagPost(e_grp, 0x01, OS_FLAG_SET, &err);
  // Event Flag Group의 비트맵을 세팅
  // 그리고나서 세팅된 비트맵이 Event Flag Node들이 요구하는 비트맵과 일치하는지 확인, 일치한다면 해당 event flag node에 있는 option 수행
  </code></pre>

