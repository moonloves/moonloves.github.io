---
layout: post
title: Computer Network
date: 2020-09-01 16:30:00 +0900
category: Lecture
---

# Computer Network 실습 :)

### Chapter 01-1. 네트워크 프로그래밍과 소켓의 이해

> #### 네트워크 프로그래밍이란?
* 둘 이상의 컴퓨터 사이에서의 데이터 송수신 프로그램
* 이 프로그램은 소켓이라는 것을 기반으로 프로그래밍
* 따라서 소켓 프로그래밍이라고 부르기도 함

> #### 소켓이란?
* 운영체제에서 제공해주는 소프트웨어적인 장치
* 소켓을 활용하면 데이터 송수신에 대한 물리적, 소프트웨어적 세세한 내용을 신경 쓸 필요가 없다는 장점이 있음

* 소켓의 생성(전화기에 장만에 비유)
  * 전화를 거는 용도의 소켓과 전화를 수신하는 용도의 소켓 생성 방법이 다름
  * 전화를 거는 용도의 소켓 = client (서버로부터 서비스 받음)
  * 전화를 받는 용도의 소켓 = server

* 전화를 받는 쪽이 server 소켓
* 전화 받기 위해서 네 가지 단계 거쳐야 함
1. 전화기가 있어야 함 = 소켓의 생성
  * 소켓 생성
  * 성공 시 파일 디스크립터 반환, 실패 시 -1 반환
2. 전화기에 전화번호가 부여되어 있어야 함 = IP와 PORT 번호의 할당
  * 생성된 소켓에 주소 정보를 부여
  * bind라는 함수를 통해 소켓에 부여
  * IP주소와 Port번호로 구성이 됨
  * 성공 시 0, 실패 시 -1 반환
3. 전화기의 전화 선이 연결되어야 함 = 연결 요청 가능상태로 변경
  * listen 함수를 호출하면 소켓이 전화를 받을 수 있는 상태가 됨
  * 전화를 받는 쪽에만 필요, 전화를 거는 쪽은 필요X
  * 성공 시 0, 실패 시 -1 반환
4. 전화가 오면 전화를 받음 = 연결 요청에 대한 수락
  * accept 함수를 호출하여 클라이언트로부터 걸려오는 전화를 받을 수 있음
  * 연결 요청의 수락
  * 연결 요청이 수락되어야 데이터의 송수신이 가능
  * 수락된 이후에 데이터의 송수신은 양방향으로 가능
  * accpet 함수 호출 이후에는 데이터의 송수신이 가능
  * accpet 함수는 blocking 함수이기 때문에 연결 요청이 있을 때에만 반환함
  * 성공 시 파일 디스크립터 반환, 실패 시 -1 반환

* 클라이언트 소켓 생성 과정(전화를 거는 소켓)
  * 서버 소켓에 비해 구현이 간단
1. 소켓 생성
  * 소켓 생성
2. 연결의 요청
  * connect 함수 호출을 통해 서버 측에 연결 요청
  * 성공 시 0, 실패 시 -1 반환

> hello_server.c
> hello_client.c

> 컴파일 방법
gcc hello_server.c -0 hserver
> 실행 방법
./hserver

* 로컬 컴퓨터 주소 = loop back 주소
* 루프 백 주소 이용하여 실행하면 됨

* 서로 다른 두 개의 컴퓨터에서 실행시키고 싶다면 루프 백 주소가 아닌 IP 주소 넣어서 실행하면 됨

### Chapter 01-2. 리눅스 기반 파일 조작하기
> 저 수준 파일 입출력
* 저 수준 파일 입출력
  * 리눅스는 소켓도 파일로 간주하기 때문에 저 수준 파일 입출력 함수를 기반으로 소켓 기반의 데이터 송수신이 가능
* 파일 디스크립터
  * 운영체제가 만든 파일을 구분하기 위한 일종의 숫자
  * 저 수준 파일 입출력 함수는 입출력을 목적으로 파일 디스크립터를 요구
* 파일 열기와 닫기
  * open
    * path, flag 전달
    * flag: 파일의 오픈 모드 정보 전달
  * close
    * fd 전달

> 파일에 데이터 쓰기
* write
  * fd, 전송할 데이터가 저장된 버퍼의 주소 값, 전송할 데이터의 바이트 수 전달

> 파일에서 데이터 읽기
* read
  * fd, 수신한 데이터를 저장할 버퍼의 주소 값, 수신할 최대 바이트 수 전달

> chapter 01-3. 윈도우 기반으로 구현하기 - 생략