---
layout: post
title: Embedded Software
date: 2020-09-01 14:30:00 +0900
category: sample
---

# EMBEDDED SOFTWARE :)

> ### 임베디드 소프트웨어의 정의
> > #### 1. 하드웨어와 소프트웨어의 Combination
* 작지만 하드웨어와 소프트웨어를 가지며, 어떤 기능을 수행
* 예) 컵의 특징을 추정하는 임베디드 시스템


> > #### 2. Dedicated Function
* 특수한 목적을 가짐
* Dedicated Purpose 예) 휴대전화(통화가 목적), 전자레인지(요리가 목적)
* 반댓말: General Purpose 예) 컴퓨터

> > #### 3. Cross-Development platform(교차개발횐경)
* 프로그래머의 관점에서 임베디드 시스템의 특징
* 일반 개발 환경: 프로그램 작성 -> 컴파일 -> 러닝
* 교차 지원 환경: 프로그램 작성 -> 컴파일 -> 다운로딩 -> 러닝
* 이 때, 프로그램 작성과 컴파일은 Host에서, 다운로딩과 러닝은 Target에서 수행
* Host에서 '개발', Target에서 '수행'
* Host(PC)와 Target(Eembedded SW)의 연결고리는 cable 및 wireless network, USB

> > #### 4. Real-time features (실시간특징)
* Real time 시스템: 시간에 대한 요구 포함
* deadline을 놓쳤다면?
  * Hard real-time system: 데드라인 놓쳤을 경우 영향이 재앙적 예) 비행기의 제어시스템
  * Soft real-time system: 데드라인 놓쳐도 영향이 미비 예) 비디오 플레이어

> > #### 5. Embedded
* 임베디드 시스템은 커다란 시스템에 속한 내장형 시스템
  * PC <- 키보드, 마우스
  * 자동차 <- 브레이크, 대시보드


> ### 널리 퍼진 Embedded System

> > #### 1. Smart Phone
* CPU의 성능이 향상됨에 따라 smart phone의 성능도 향상
* general purpose에 가까워졌지만, cross development가 필요하다는 점에서 여전히 embedded system

> > #### 2. IoT
* 디바이스에 인터넷 기능을 넣어 통신이 가능하게 함으로써 디바이스들이 효과적으로 제어되도록 함


> ### Embedded Software Architecture

> > #### Device Handling 과정(선수지식)

임베디드 소프트웨어의 구성

1. Device check routine
* 디바이스를 케어함
* interrupt service routine(ISR), interrupt handler라고도 불림
  * handler를 빠르게 수행하는 것이 중요
  * 가능한 한 짧은 기간동안 수행하는 것이 중요
  * 즉각적인 반응을 요구
* 외부 디바이스(센서, 다른 디바이스 등)으로부터 얻은 데이터를 처리

2. Data processing routine
* 디바이스로부터 얻은 데이터를 연산 및 처리
* task routine이라고도 불림
* 시간이 오래 소요됨


> > #### Embedded Hardware에 적절한 Software인지, Application에 적절한 Software인지에 따라 5개 중 선택하여 사용

#### 1~5까지 점차 업그레이드

> > #### 1. Round-robin
* 가장 간단한 임베디드 소프트웨어 아키텍쳐로, 간단한 임베디드는 이를 사용
* device check routine과 data processing routine이 번갈아가며 수행
* 단점: 마지막 디바이스의 device check routine이 수행되기까지 오랜 시간이 소요됨 (=device check routine의 수행이 지연될 수 있음)

<pre>
<code>
while(1) {
    if (Device A needs service)
        take care of A; -> Device check routine
        process data from A; -> Data processing routine

    if (Device B needs service)
        take care of B; -> Device check routine
        process data from B; -> Data processing routine
    
    ...

    if (Device J needs service)
        take care of J; -> Device check routine
        process data from J; -> Data processing routine
    
}
</code>
</pre>


> > #### 2. Round-robin with interrupt
* round-robin의 문제점 해결
* ISR이 task routine보다 우선순위가 높음
* ISR에서 우선순위를 가질 수 있음
* 모든 task code는 같은 우선순위를 갖기 때문에, FIFO 순서로 수행됨
* 방법
  * interrupt service routine을 별도의 함수로 구현
  * 해당 디바이스의 input 데이터가 도착했을 경우에 flag를 셋팅
  * 메인에서는 flag의 셋팅 여부를 체크
  * 셋팅 되었을 경우에 해당 device check routine에 해당하는 task routine을 수행하도록 지원
  * 따라서 디바이스와 연관된 루틴이 매우 빠르게 수행이 가능하게 됨.
* interrupt service의 빠른 수행 가능
  * interrupt service routine이 별도의 함수로 구현됨
  * interrupt service routine이 task routine을 포함하는 main loop보다 우선순위가 높음

<pre>
<code>

while(1) {
    if (A flag is set)
        A task code
    if (B flag is set)
        B task code
    if (C flag is set)
        C task code
}

ISR A : Set flag A
ISR B : Set flag B
ISR C : Set flag C

</pre>
</code>

임베디드 소프트웨어의 구성

* Round-robin vs. Round-robin with interrupt
  * Round-robin with interrupt
    * ISR을 별도의 함수로 구현
    * flag를 만들어 task routine보다 device check routine의 우선순위를 높임
  * Round-robin
    * device check routine과 task routine이 번갈아가며 수행


> > #### 3. Function queue scheduling


> > #### 4. Real-time operating system



> > #### 5. Embedded Linux